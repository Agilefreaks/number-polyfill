// Generated by CoffeeScript 1.6.3
/*
HTML5 Number polyfill | Jonathan Stipe | https://github.com/jonstipe/number-polyfill
*/


(function() {
  (function($) {
    var decimalNum, i, numberPolyfill;
    i = document.createElement("input");
    i.setAttribute("type", "number");
    if (i.type === "text") {
      $.fn.inputNumber = function() {
        console.log("found " + ($(this).filter('input[type="number"]').length) + " elements.");
        $(this).filter('input[type="number"]').each(function() {
          console.log("Creating new polyfill.");
          numberPolyfill.polyfills.push(new numberPolyfill(this));
        });
        return $(this);
      };
      decimalNum = function(num, precision) {
        var r, rNum;
        if (precision == null) {
          if (typeof num === 'object' && num.constructor === decimalNum) {
            this.num = num.num;
            this.precision = num.precision;
          } else if (typeof num === 'number' || (typeof num === 'object' && num.constructor === Number)) {
            rNum = num;
            r = 0;
            while (rNum > Math.floor(rNum)) {
              rNum = num * Math.pow(10, r++);
            }
            this.num = rNum;
            this.precision = r;
          }
        } else {
          this.num = num;
          this.precision = precision;
        }
      };
      decimalNum.prototype.raise = function(digits) {
        this.num = this.num * Math.pow(10, digits);
        this.precision += digits;
      };
      decimalNum.prototype.add = function(other_num) {
        var sum;
        other_num = new decimalNum(other_num);
        if (this.precision > other_num.precision) {
          other_num.raise(this.precision - other_num.precision);
        } else if (this.precision < other_num.precision) {
          this.raise(other_num.precision - this.precision);
        }
        sum = new decimalNum(this.num + other_num.num, this.precision);
        sum.reduce();
        return sum;
      };
      decimalNum.prototype.subtract = function(other_num) {
        var diff;
        other_num = new decimalNum(other_num);
        if (this.precision > other_num.precision) {
          other_num.raise(this.precision - other_num.precision);
        } else if (this.precision < other_num.precision) {
          this.raise(other_num.precision - this.precision);
        }
        diff = new decimalNum(this.num - other_num.num, this.precision);
        diff.reduce();
        return diff;
      };
      decimalNum.prototype.reduce = function() {
        var r;
        r = 0;
        while (this.num % Math.pow(10, r) === 0 && r < this.precision) {
          r++;
        }
        if (r > 0) {
          this.num = this.num / Math.pow(10, r);
          this.precision -= r;
        }
      };
      decimalNum.prototype.toFloat = function() {
        return this.num / Math.pow(10, this.precision);
      };
      decimalNum.prototype.toString = function() {
        return this.toFloat().toString();
      };
      decimalNum.prototype.mod = function(num) {
        return this.toFloat() % num;
      };
      numberPolyfill = function(elem) {
        var $btnContainer, $fieldContainer, attrMutationCallback, attrObserver, domMouseScrollHandler, halfHeight, mouseWheelHandler,
          _this = this;
        this.elem = $(elem);
        halfHeight = (this.elem.outerHeight() / 2) + 'px';
        this.upBtn = $('<div/>', {
          "class": 'number-spin-btn number-spin-btn-up',
          style: "height: " + halfHeight
        });
        this.downBtn = $('<div/>', {
          "class": 'number-spin-btn number-spin-btn-down',
          style: "height: " + halfHeight
        });
        $btnContainer = $('<div/>', {
          "class": 'number-spin-btn-container'
        });
        $fieldContainer = $('<span/>', {
          style: "white-space: nowrap"
        });
        this.upBtn.appendTo($btnContainer);
        this.downBtn.appendTo($btnContainer);
        this.elem.wrap($fieldContainer);
        $btnContainer.insertAfter(this.elem);
        console.log("Added buttons.");
        domMouseScrollHandler = function(e) {
          e.preventDefault();
          if (e.originalEvent.detail < 0) {
            _this.increment();
          } else {
            _this.decrement();
          }
        };
        mouseWheelHandler = function(e) {
          e.preventDefault();
          if (e.originalEvent.wheelDelta > 0) {
            _this.increment();
          } else {
            _this.decrement();
          }
        };
        console.log("Adding element event handlers.");
        this.elem.on({
          focus: function(e) {
            _this.elem.on({
              DOMMouseScroll: domMouseScrollHandler,
              mousewheel: mouseWheelHandler
            });
          },
          blur: function(e) {
            _this.elem.off({
              DOMMouseScroll: domMouseScrollHandler,
              mousewheel: mouseWheelHandler
            });
          },
          keypress: function(e) {
            var _ref, _ref1;
            if (e.keyCode === 38) {
              _this.increment();
            } else if (e.keyCode === 40) {
              _this.decrement();
            } else if (((_ref = e.keyCode) !== 8 && _ref !== 9 && _ref !== 35 && _ref !== 36 && _ref !== 37 && _ref !== 39 && _ref !== 46) && ((_ref1 = e.which) !== 45 && _ref1 !== 48 && _ref1 !== 49 && _ref1 !== 50 && _ref1 !== 51 && _ref1 !== 52 && _ref1 !== 53 && _ref1 !== 54 && _ref1 !== 55 && _ref1 !== 56 && _ref1 !== 57)) {
              e.preventDefault();
            }
          },
          change: function(e) {
            var newVal, params;
            if (e.originalEvent != null) {
              params = _this.getParams();
              newVal = _this.clipValues(params['val'], params['min'], params['max']);
              newVal = _this.matchStep(newVal, params['min'], params['max'], params['step'], params['stepDecimal']);
              _this.elem.val(newVal);
            }
          }
        });
        console.log("Adding button event handlers.");
        this.upBtn.on("mousedown", function(e) {
          var releaseFunc, timeoutFunc;
          _this.increment();
          timeoutFunc = function(incFunc) {
            _this.increment();
            _this.timeoutID = window.setTimeout(timeoutFunc, 10);
          };
          releaseFunc = function(e) {
            window.clearTimeout(_this.timeoutID);
            $(document).off('mouseup', releaseFunc);
            _this.upBtn.off('mouseleave', releaseFunc);
          };
          $(document).on('mouseup', releaseFunc);
          _this.upBtn.on('mouseleave', releaseFunc);
          _this.timeoutID = window.setTimeout(timeoutFunc, 700);
        });
        this.downBtn.on("mousedown", function(e) {
          var releaseFunc, timeoutFunc;
          _this.decrement();
          timeoutFunc = function(decFunc) {
            _this.decrement();
            _this.timeoutID = window.setTimeout(timeoutFunc, 10);
          };
          releaseFunc = function(e) {
            window.clearTimeout(_this.timeoutID);
            $(document).off('mouseup', releaseFunc);
            _this.downBtn.off('mouseleave', releaseFunc);
          };
          $(document).on('mouseup', releaseFunc);
          _this.downBtn.on('mouseleave', releaseFunc);
          _this.timeoutID = window.setTimeout(timeoutFunc, 700);
        });
        this.elem.css("textAlign", 'right');
        if (this.elem.css("opacity") !== "1") {
          $btnContainer.css("opacity", this.elem.css("opacity"));
        }
        if (this.elem.css("visibility") !== "visible") {
          $btnContainer.css("visibility", this.elem.css("visibility"));
        }
        console.log("Adding mutation observers.");
        if ((typeof WebKitMutationObserver !== "undefined" && WebKitMutationObserver !== null) || (typeof MutationObserver !== "undefined" && MutationObserver !== null)) {
          attrMutationCallback = function(mutations, observer) {
            var mutation, _i, _len;
            for (_i = 0, _len = mutations.length; _i < _len; _i++) {
              mutation = mutations[_i];
              if (mutation.type === "attributes") {
                if (mutation.attributeName === "class") {
                  $btnContainer.removeClass(mutation.oldValue).addClass(_this.elem.className);
                } else if (mutation.attributeName === "style") {
                  $btnContainer.css({
                    "opacity": _this.elem.css("opacity"),
                    "visibility": _this.elem.css("visibility"),
                    "display": _this.elem.css("display")
                  });
                }
              }
            }
          };
          attrObserver = (typeof WebKitMutationObserver !== "undefined" && WebKitMutationObserver !== null) ? new WebKitMutationObserver(attrMutationCallback) : ((typeof MutationObserver !== "undefined" && MutationObserver !== null) ? new MutationObserver(attrMutationCallback) : null);
          attrObserver.observe(elem, {
            attributes: true,
            attributeOldValue: true,
            attributeFilter: ["class", "style"]
          });
        } else if (typeof MutationEvent !== "undefined" && MutationEvent !== null) {
          this.elem.on("DOMAttrModified", function(evt) {
            if (evt.originalEvent.attrName === "class") {
              $(btnContainer).removeClass(evt.originalEvent.prevValue).addClass(evt.originalEvent.newValue);
            } else if (evt.originalEvent.attrName === "style") {
              $(btnContainer).css({
                "display": elem.style.display,
                "visibility": elem.style.visibility,
                "opacity": elem.style.opacity
              });
            }
          });
        }
        console.log("Done with one.");
      };
      numberPolyfill.polyfills = [];
      numberPolyfill.prototype.getParams = function() {
        var max, min, step, val;
        step = this.elem.attr('step');
        min = this.elem.attr('min');
        max = this.elem.attr('max');
        val = this.elem.val();
        if (!/^-?\d+(?:\.\d+)?$/.test(step)) {
          step = null;
        }
        if (!/^-?\d+(?:\.\d+)?$/.test(min)) {
          min = null;
        }
        if (!/^-?\d+(?:\.\d+)?$/.test(max)) {
          max = null;
        }
        if (!/^-?\d+(?:\.\d+)?$/.test(val)) {
          val = min || 0;
        }
        return {
          min: new decimalNum(min),
          max: new decimalNum(max),
          step: new decimalNum(step),
          val: new decimalNum(val)
        };
      };
      numberPolyfill.prototype.clipValues = function(value, min, max) {
        if ((max != null) && value.toFloat() > max.toFloat()) {
          return max;
        } else if ((min != null) && value.toFloat() < min.toFloat()) {
          return min;
        } else {
          return value;
        }
      };
      numberPolyfill.prototype.stepNormalize = function(value) {
        return value;
      };
      numberPolyfill.prototype.increment = function() {
        var newVal, params;
        if (!this.elem.is(":disabled")) {
          console.log("increment() called.");
          params = this.getParams();
          newVal = params['val'].add(params['step']);
          if ((params['max'] != null) && newVal.toFloat() > params['max'].toFloat()) {
            newVal = params['max'];
          }
          newVal = this.stepNormalize(newVal);
          this.elem.val(newVal).change();
        }
      };
      numberPolyfill.prototype.decrement = function() {
        var newVal, params;
        if (!this.elem.is(":disabled")) {
          console.log("decrement() called.");
          params = this.getParams();
          newVal = params['val'].subtract(params['step']);
          if ((params['min'] != null) && newVal.toFloat() < params['min'].toFloat()) {
            newVal = params['min'];
          }
          newVal = this.stepNormalize(newVal);
          this.elem.val(newVal).change();
        }
      };
    } else {
      $.fn.inputNumber = function() {
        return $(this);
      };
      return;
    }
    $(function() {
      $('input[type="number"]').inputNumber();
    });
  })(jQuery);

}).call(this);
